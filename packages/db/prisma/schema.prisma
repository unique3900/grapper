generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------
// Enums
// --------------
enum paymentstatus {
  Success
  Failed
  Pending
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

// --------------
// Models
// --------------
model admin {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  // Password can be optional if you also support Google login
  password String?

  // Auth provider info
  provider AuthProvider @default(LOCAL)
  googleId String?

  auctions auction[]

  adminSessions adminSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model user {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  // Password can be optional if Google login
  password String?
  verified Boolean @default(false)

  // Auth provider info
  provider AuthProvider @default(LOCAL)
  googleId String? // Store the Google ID if user logs in with Google

  // Bids placed by this user
  biddings bid[]

  winnings auction[] @relation("UserWonAuctions")

  // Payment records for this user
  payments payments[]

  // Relationship for the bidWinners table
  bidWinners bidWinners[]

  // Refresh token sessions (for rotation)
  userSessions userSession[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model auction {
  id          String @id @default(uuid())
  title       String
  description String
  basePrice   Int
  adminId     String

  winnerId String?
  winner   user?   @relation("UserWonAuctions", fields: [winnerId], references: [id])

  // Auction belongs to an admin
  admin admin @relation(fields: [adminId], references: [id])

  // A single auction can have multiple bids
  biddings bid[]

  // A single auction can also have multiple bidWinners records
  bidWinners bidWinners[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model bid {
  id        String  @id @default(uuid())
  userId    String
  user      user    @relation(fields: [userId], references: [id])
  auctionId String
  auction   auction @relation(fields: [auctionId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model bidWinners {
  id String @id @default(uuid())

  userId String
  user   user   @relation(fields: [userId], references: [id])

  auctionId String
  auction   auction @relation(fields: [auctionId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model payments {
  id     String        @id @default(uuid())
  status paymentstatus
  userId String
  user   user          @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------
// Session Models
// --------------
model userSession {
  id     String @id @default(uuid())
  userId String
  user   user   @relation(fields: [userId], references: [id])

  refreshToken String
  expiresAt    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model adminSession {
  id      String @id @default(uuid())
  adminId String
  admin   admin  @relation(fields: [adminId], references: [id])

  refreshToken String
  expiresAt    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
